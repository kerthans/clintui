"use client"
import { buttonStyles } from "@/components/ui/button"
import { ScrollArea, ScrollBar, ScrollViewport } from "@/components/ui/scroll-area"
import { useCopyButton } from "@/resources/lib/copy"
import { IconCheck, IconDuplicate } from "@intentui/icons"
import type { ScrollAreaViewportProps } from "@radix-ui/react-scroll-area"
import {
  type ButtonHTMLAttributes,
  type HTMLAttributes,
  type ReactElement,
  type ReactNode,
  useCallback,
  useRef,
} from "react"
import { twMerge } from "tailwind-merge"

export type PreProps = HTMLAttributes<HTMLElement> & {
  ref?: React.Ref<HTMLElement>
  /**
   * Icon of code block
   *
   * When passed as a string, it assumes the value is the HTML of icon
   */
  icon?: ReactNode

  /**
   * Allow to copy code with copy button
   *
   * @defaultValue true
   */
  allowCopy?: boolean

  /**
   * Keep original background color generated by Shiki or Rehype Code
   *
   * @defaultValue false
   */
  keepBackground?: boolean

  viewportProps?: ScrollAreaViewportProps
}

export const Pre = ({ className, ref, ...props }: React.ComponentProps<"pre">) => {
  return (
    <pre
      ref={ref}
      className={twMerge("w-full p-4 leading-relaxed focus-visible:outline-hidden", className)}
      {...props}
    >
      {props.children}
    </pre>
  )
}

export const PlainCode = ({
  className,
  title,
  allowCopy = true,
  keepBackground = true,
  icon,
  ref,
  viewportProps,
  ...props
}: PreProps) => {
  const areaRef = useRef<HTMLDivElement>(null)
  const onCopy = useCallback(() => {
    const pre = areaRef.current?.getElementsByTagName("pre").item(0)

    if (!pre) return

    const clone = pre.cloneNode(true) as HTMLElement
    for (const node of clone.querySelectorAll(".nd-copy-ignore")) {
      node.remove()
    }

    void navigator.clipboard.writeText(clone.textContent ?? "")
  }, [])

  return (
    <figure
      ref={ref}
      {...props}
      className={twMerge(
        "not-prose group relative my-6 max-w-4xl overflow-hidden rounded-lg border bg-secondary/50 text-sm",
        keepBackground && "bg-white dark:bg-zinc-950!",
        className,
      )}
    >
      {title ? (
        <div className="flex w-full flex-row items-center gap-2 border-b bg-fd-muted px-4 py-1.5">
          {icon ? (
            <div
              className="text-fd-muted-foreground [&_svg]:size-3.5"
              // biome-ignore lint/security/noDangerouslySetInnerHtmlWithChildren: <explanation>
              dangerouslySetInnerHTML={
                typeof icon === "string"
                  ? {
                      __html: icon,
                    }
                  : undefined
              }
            >
              {typeof icon !== "string" ? icon : null}
            </div>
          ) : null}
          <figcaption className="flex-1 truncate text-fd-muted-foreground">{title}</figcaption>
          {allowCopy ? <CopyButton className="-me-2" onCopy={onCopy} /> : null}
        </div>
      ) : (
        allowCopy && (
          <CopyButton className="absolute top-0 right-0 z-[2] backdrop-blur-md" onCopy={onCopy} />
        )
      )}
      <ScrollArea ref={areaRef} className="w-full" dir="ltr">
        <ScrollViewport
          {...viewportProps}
          className={twMerge("max-h-[600px]", viewportProps?.className)}
        >
          {props.children}
        </ScrollViewport>
        <ScrollBar orientation="horizontal" />
      </ScrollArea>
    </figure>
  )
}

function CopyButton({
  className,
  onCopy,
  ...props
}: ButtonHTMLAttributes<HTMLButtonElement> & {
  onCopy: () => void
}): ReactElement {
  const [checked, onClick] = useCopyButton(onCopy)

  return (
    <button
      type="button"
      className={twMerge(
        buttonStyles({
          size: "square-petite",
          intent: "plain",
          className: twMerge(
            "transition-opacity hover:bg-transparent group-hover:opacity-100",
            !checked && "opacity-0",
            className,
          ),
        }),
      )}
      aria-label="Copy Text"
      onClick={onClick}
      {...props}
    >
      {checked ? <IconCheck /> : <IconDuplicate />}
    </button>
  )
}
